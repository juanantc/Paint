
package paint;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.*;
import java.util.ArrayList;
import sm.formas.*;

public class Lienzo extends javax.swing.JPanel {
    
    final static int PUNTO = 1;
    final static int LINEA = 2;
    final static int RECTANGULO = 3;
    final static int OVALO = 4;
    final static int CURVA = 5;
    final static int RECTANGULOREDONDEADO = 6;
    
    private Point2D a,b;
    
    private ArrayList<Forma> vFormas; 
    private Forma f;
    private Forma curva;
        
    private static int forma = 1;
    private static Color colorFondo = Color.black;
    private static Color colorFrente = Color.black;
    private static int relleno = 0;
    private static Boolean editarPosicion = false;
    private static Boolean editarAtributos = false;
    private static int grosor = 1;
    private static int trazo = 0;

    public Lienzo(){
        initComponents();
        this.vFormas = new ArrayList<Forma>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(300, 300));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
 
    @Override
    public void paint(Graphics g) {       
        super.paint(g); 
        Graphics2D g2d = (Graphics2D)g; 
        paintFormas(g2d);                
    }
    
    public void paintFormas(Graphics2D g2d){
        for(Forma f:vFormas)
            f.dibuja(g2d); 
    }
       
    private void createForma(Point2D p){
        
        Stroke stroke = new BasicStroke();
        
        if(trazo == 0)
            stroke = new BasicStroke(grosor);
        else if(trazo == 1)
            stroke = new BasicStroke(grosor,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,
                           new float[] {16.0f,20.0f},0.0f);
        
        if(p != null){
            if(forma == PUNTO)
                f = new Punto(p,colorFondo,colorFrente,relleno,stroke);
            if(forma == LINEA)
                f = new Linea(p,colorFondo,colorFrente,relleno,stroke);
            if(forma == CURVA)
                f = new Curva(p,colorFondo,colorFrente,relleno,stroke);
            if(forma == RECTANGULO)
                f = new Rectangulo(p,colorFondo,colorFrente,relleno,stroke);             
            if(forma == OVALO)
                f = new Elipse(p,colorFondo,colorFrente,relleno,stroke);                
            if(forma == RECTANGULOREDONDEADO)
                f = new RectanguloRedondeado(p,colorFondo,colorFrente,relleno,stroke); 
            this.repaint();
        }
    }
    
    private void updateForma(Point2D p1,Point2D p2){  
        if(forma != PUNTO && p1 != null && p2 != null){
            f.updateForma(p1, p2);
            this.repaint(); 
        }      
    }

    private Forma getSelectedForma(Point2D p){ 
        for(Forma f:vFormas){
            if(f.contains(p))
                return f;
        }           
        return null;
    } 
 
    public void setForma(int f){
        forma = f;
    }
    
    public void setColorFondo(Color c){  
        colorFondo = c;
    }
    
    public void setColorFrente(Color c){  
        colorFrente = c;
    }
    
    public void setRelleno(int r){
        relleno = r; 
    }
    
    public void setGrosor(int g){
        grosor = g;
    }
    
    public void setEditarPosicion(boolean e){
        editarPosicion = e;
    }
    
    public void setEditarAtributos(boolean e){
        editarAtributos = e;
    }
    
    public void setTrazo(int t){
        trazo = t;
    }
    
    public void setFormas(ArrayList<Forma> v){
        vFormas = v;
    }
    
    public boolean getEditarPosicion(){
        return editarPosicion;
    }
    
    public boolean getEditarAtributos(){
        return editarAtributos;
    }
    
    public int getRelleno(){
        return relleno; 
    }
    
    public Color getColorFondo(){  
        return colorFondo;
    }
    
    public Color getColorFrente(){  
        return colorFrente;
    }
    
    public int getTrazo(){
        return trazo;
    }
    
    public int getForma(){
        return forma;
    }
    
    public int getGrosor(){
        return grosor;
    }
    
    public ArrayList<Forma> getFormas(){
        return vFormas;
    }
    
      
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(editarPosicion && f!= null){
            f.setLocation(evt.getPoint());
            this.repaint();
        }else if(!editarAtributos && f!= null){
            if(forma == CURVA && curva instanceof Curva){
                curva.updateControlPoint(evt.getPoint());
                this.repaint();
            }else{
            b = evt.getPoint();
            this.updateForma(a,b);
            }
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(editarPosicion && f != null){
             f.setLocation(evt.getPoint());
             this.repaint();
        }else if(!editarAtributos && f!= null){
            if(forma == CURVA && curva instanceof Curva){
                curva.updateControlPoint(evt.getPoint());
                curva = null;
                this.repaint();
            }else{
            b = evt.getPoint();
            this.updateForma(a,b);
            }
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        
        if(editarPosicion || editarAtributos)
            f = this.getSelectedForma(evt.getPoint());            
        else if(!editarAtributos){          
            curva = this.getSelectedForma(evt.getPoint());
            if(forma == CURVA && curva instanceof Curva){
                if(curva instanceof Curva){
                    curva.updateControlPoint(evt.getPoint());
                    this.repaint();
                }
            }else{
                a = evt.getPoint();
                this.createForma(a);       
                vFormas.add(f); 
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(editarAtributos && !editarPosicion){
            f = this.getSelectedForma(evt.getPoint());
            
            if(f != null){
                f.setColorFondo(colorFondo);
                f.setColorFrente(colorFrente);
                f.setRelleno(relleno);

                Stroke sk = new BasicStroke();
                if(trazo == 0)
                    sk = new BasicStroke(grosor);
                else if(trazo == 1)
                    sk = new BasicStroke(grosor,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,
                               new float[] {16.0f,20.0f},0.0f);

                f.setStroke(sk);

                this.repaint();
            }         
        }
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
