
package paint;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
* Clase que hereda de Lienzo y que incluye la posibilidad de añadir una imagen al lienzo.
* @author Juan Antonio Moraleda Ocón
*/
public class LienzoImagen extends Lienzo {
    
    /**
     * Imagen
     */
    private BufferedImage img;
    
    public LienzoImagen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que dibuja la imagen en el caso de que exista.
     * @param g Recibe un objeto graphics necesario para dibujar la imagen. 
     */
    public void paintComponent(Graphics g) {       
        super.paintComponent(g);
       
        Graphics2D g2d = (Graphics2D)g;
        if(img!=null) g2d.drawImage(img,0,0,this); 
    }
    
    /**
     * Método que añade cada una de las Formas contenidas en el vector vShapes a la imagen(img).
     */
    public void addShapesToImage(){
        paintFormas(img.createGraphics());     
    }
    
    /**
    * Método modificador del atributo img.
    * @param i Recibe el valor del atributo img.
    */
    public void setImage(BufferedImage i){
        img = i;
        setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
    }
    
    /**
    * Método consultor del atributo img.
    * @return Retorna el valor del atributo img.
    */
    public BufferedImage getImage(){
        return img;
    }
    
    /**
     * Método que convierte la imagen a int_rgb. Es usado en los casos en los que tras aplicar 
     * una operación sobre la imagen, dicha operación devuelve la imagen en un tipo no deseado.
     */
    public void convertToIntRGB(){       
        BufferedImage i = new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);    
        Graphics g = i.getGraphics();
        g.drawImage(img,0,0,null);
        img = i;      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
