
package paint;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.ThresholdOp;

public class VentanaPrincipal extends javax.swing.JFrame {
    
    BufferedImage imgSrc;
  
    public VentanaPrincipal(){
        initComponents();
        
        VentanaInterna vi = new VentanaInterna();
        BufferedImage img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.white);
        g2d.fillRect(0,0,300,300);
        vi.getLienzo().setImage(img);
        vi.setTitle("nueva");
        escritorio.add(vi);
        vi.setVisible(true);
        
        imgSrc = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientas = new javax.swing.ButtonGroup();
        grupoColores = new javax.swing.ButtonGroup();
        panelSuperior = new javax.swing.JPanel();
        duplicar = new javax.swing.JButton();
        paletaColor1 = new javax.swing.JPanel();
        colorSeleccionado1 = new javax.swing.JButton();
        paletaColor2 = new javax.swing.JPanel();
        colorSeleccionado2 = new javax.swing.JButton();
        paletaGrosor = new javax.swing.JPanel();
        selectorGrosor = new javax.swing.JSpinner();
        tipoTrazo = new javax.swing.JComboBox();
        tipoRelleno = new javax.swing.JComboBox();
        editarPosicion = new javax.swing.JCheckBox();
        editarAtributos = new javax.swing.JCheckBox();
        panelIzq = new javax.swing.JPanel();
        paletaFormas = new javax.swing.JPanel();
        punto = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        curva = new javax.swing.JToggleButton();
        rectanguloRedondeado = new javax.swing.JToggleButton();
        paletaColores = new javax.swing.JPanel();
        color1 = new javax.swing.JButton();
        color2 = new javax.swing.JButton();
        color3 = new javax.swing.JButton();
        color4 = new javax.swing.JButton();
        color5 = new javax.swing.JButton();
        color6 = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        panelDerecho = new javax.swing.JPanel();
        paletaJMF = new javax.swing.JPanel();
        abrirJMF = new javax.swing.JButton();
        camaraJMF = new javax.swing.JButton();
        capturarJMF = new javax.swing.JButton();
        paletaContraste = new javax.swing.JPanel();
        normal = new javax.swing.JButton();
        iluminado = new javax.swing.JButton();
        oscurecido = new javax.swing.JButton();
        paletaEscala = new javax.swing.JPanel();
        aumentar = new javax.swing.JButton();
        disminuir = new javax.swing.JButton();
        paletaFiltro = new javax.swing.JPanel();
        selectorFiltro = new javax.swing.JComboBox();
        panelInferior = new javax.swing.JPanel();
        paletas = new javax.swing.JPanel();
        paletaUmbralizacion = new javax.swing.JPanel();
        sliderUmbralizacion = new javax.swing.JSlider();
        nivelesUmbralizacion = new javax.swing.JComboBox();
        paletaBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        paletaRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        r90 = new javax.swing.JButton();
        r180 = new javax.swing.JButton();
        r270 = new javax.swing.JButton();
        estado = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        grabarSonido = new javax.swing.JMenuItem();
        imagen = new javax.swing.JMenu();
        rescaleOp = new javax.swing.JMenuItem();
        convolveOp = new javax.swing.JMenuItem();
        affineTransformOp = new javax.swing.JMenuItem();
        lookupOp = new javax.swing.JMenuItem();
        bandCombineOp = new javax.swing.JMenuItem();
        colorConvertOp = new javax.swing.JMenuItem();
        umbralizacionOp = new javax.swing.JMenuItem();
        sobelOp = new javax.swing.JMenuItem();
        restaOp = new javax.swing.JMenuItem();
        multiplicacionOp = new javax.swing.JMenuItem();
        ver = new javax.swing.JMenu();
        barraEstado = new javax.swing.JCheckBoxMenuItem();
        ayuda = new javax.swing.JMenu();
        acercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 720));

        panelSuperior.setMinimumSize(new java.awt.Dimension(350, 100));
        panelSuperior.setPreferredSize(new java.awt.Dimension(350, 100));

        duplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Duplicar.png"))); // NOI18N
        duplicar.setToolTipText("Duplicar Ventana de Imagen");
        duplicar.setPreferredSize(new java.awt.Dimension(30, 30));
        duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarActionPerformed(evt);
            }
        });
        panelSuperior.add(duplicar);

        paletaColor1.setBorder(javax.swing.BorderFactory.createTitledBorder("Color frente"));

        colorSeleccionado1.setBackground(new java.awt.Color(0, 0, 0));
        colorSeleccionado1.setToolTipText("Seleecciona un color personalizado para el borde");
        colorSeleccionado1.setPreferredSize(new java.awt.Dimension(55, 40));
        colorSeleccionado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSeleccionado1ActionPerformed(evt);
            }
        });
        paletaColor1.add(colorSeleccionado1);

        panelSuperior.add(paletaColor1);
        paletaColor1.getAccessibleContext().setAccessibleName("");

        paletaColor2.setBorder(javax.swing.BorderFactory.createTitledBorder("Color fondo"));
        paletaColor2.setToolTipText("");

        colorSeleccionado2.setBackground(new java.awt.Color(0, 0, 0));
        colorSeleccionado2.setToolTipText("Seleecciona un color personalizado para el relleno");
        colorSeleccionado2.setPreferredSize(new java.awt.Dimension(55, 40));
        colorSeleccionado2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSeleccionado2ActionPerformed(evt);
            }
        });
        paletaColor2.add(colorSeleccionado2);

        panelSuperior.add(paletaColor2);

        paletaGrosor.setBorder(javax.swing.BorderFactory.createTitledBorder("Grosor y tipo del trazo"));

        selectorGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));
        selectorGrosor.setToolTipText("Grosor del trazo");
        selectorGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectorGrosorStateChanged(evt);
            }
        });

        tipoTrazo.setMaximumRowCount(2);
        tipoTrazo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Continuo", "Discontinuo" }));
        tipoTrazo.setToolTipText("Tipo del trazo");
        tipoTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoTrazoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paletaGrosorLayout = new javax.swing.GroupLayout(paletaGrosor);
        paletaGrosor.setLayout(paletaGrosorLayout);
        paletaGrosorLayout.setHorizontalGroup(
            paletaGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paletaGrosorLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(selectorGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(tipoTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paletaGrosorLayout.setVerticalGroup(
            paletaGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paletaGrosorLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(paletaGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectorGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSuperior.add(paletaGrosor);

        tipoRelleno.setMaximumRowCount(4);
        tipoRelleno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin relleno", "Color liso", "Degradado vertical", "Degradado horizontal" }));
        tipoRelleno.setMaximumSize(new java.awt.Dimension(128, 20));
        tipoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoRellenoActionPerformed(evt);
            }
        });
        panelSuperior.add(tipoRelleno);

        editarPosicion.setText("Editar posición");
        editarPosicion.setToolTipText("Arrastrar una figura para cambiarla de posición");
        editarPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarPosicionActionPerformed(evt);
            }
        });
        panelSuperior.add(editarPosicion);

        editarAtributos.setText("Editar atributos");
        editarAtributos.setToolTipText("Seleccionar una figura haciendo clic sobre ella, modificar atributos y volver a hacer clic sobre la misma para que se apliquen los cambios  ");
        editarAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarAtributosActionPerformed(evt);
            }
        });
        panelSuperior.add(editarAtributos);

        getContentPane().add(panelSuperior, java.awt.BorderLayout.PAGE_START);

        panelIzq.setLayout(new java.awt.GridLayout(2, 0));

        paletaFormas.setBorder(javax.swing.BorderFactory.createTitledBorder("Formas"));
        paletaFormas.setName(""); // NOI18N
        paletaFormas.setPreferredSize(new java.awt.Dimension(42, 150));
        paletaFormas.setLayout(new java.awt.GridLayout(6, 1));

        grupoHerramientas.add(punto);
        punto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Lapiz.gif"))); // NOI18N
        punto.setSelected(true);
        punto.setToolTipText("Punto");
        punto.setPreferredSize(new java.awt.Dimension(30, 30));
        punto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntoActionPerformed(evt);
            }
        });
        paletaFormas.add(punto);

        grupoHerramientas.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Linea.gif"))); // NOI18N
        linea.setToolTipText("Línea");
        linea.setPreferredSize(new java.awt.Dimension(30, 30));
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        paletaFormas.add(linea);

        grupoHerramientas.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Rectangulo.gif"))); // NOI18N
        rectangulo.setToolTipText("Rectángulo");
        rectangulo.setPreferredSize(new java.awt.Dimension(30, 30));
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloActionPerformed(evt);
            }
        });
        paletaFormas.add(rectangulo);

        grupoHerramientas.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Ovalo.gif"))); // NOI18N
        elipse.setToolTipText("Elipse");
        elipse.setPreferredSize(new java.awt.Dimension(30, 30));
        elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseActionPerformed(evt);
            }
        });
        paletaFormas.add(elipse);

        grupoHerramientas.add(curva);
        curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/Curva.png"))); // NOI18N
        curva.setToolTipText("Curva");
        curva.setPreferredSize(new java.awt.Dimension(30, 30));
        curva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaActionPerformed(evt);
            }
        });
        paletaFormas.add(curva);

        grupoHerramientas.add(rectanguloRedondeado);
        rectanguloRedondeado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/RectanguloRedondeado.gif"))); // NOI18N
        rectanguloRedondeado.setToolTipText("Rectángulo redondeado");
        rectanguloRedondeado.setPreferredSize(new java.awt.Dimension(30, 30));
        rectanguloRedondeado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloRedondeadoActionPerformed(evt);
            }
        });
        paletaFormas.add(rectanguloRedondeado);

        panelIzq.add(paletaFormas);

        paletaColores.setBorder(javax.swing.BorderFactory.createTitledBorder("Colores"));
        paletaColores.setToolTipText("Botón izquierdo: color frente, botón derecho: color fondo");
        paletaColores.setPreferredSize(new java.awt.Dimension(72, 120));
        paletaColores.setLayout(new java.awt.GridLayout(6, 1));

        color1.setBackground(new java.awt.Color(0, 0, 0));
        color1.setPreferredSize(new java.awt.Dimension(30, 30));
        color1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color1MouseClicked(evt);
            }
        });
        paletaColores.add(color1);

        color2.setBackground(new java.awt.Color(255, 255, 255));
        color2.setPreferredSize(new java.awt.Dimension(20, 20));
        color2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color2MouseClicked(evt);
            }
        });
        paletaColores.add(color2);

        color3.setBackground(new java.awt.Color(255, 0, 0));
        color3.setPreferredSize(new java.awt.Dimension(20, 20));
        color3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color3MouseClicked(evt);
            }
        });
        paletaColores.add(color3);

        color4.setBackground(new java.awt.Color(255, 255, 0));
        color4.setPreferredSize(new java.awt.Dimension(20, 20));
        color4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color4MouseClicked(evt);
            }
        });
        paletaColores.add(color4);

        color5.setBackground(new java.awt.Color(0, 0, 255));
        color5.setPreferredSize(new java.awt.Dimension(20, 20));
        color5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color5MouseClicked(evt);
            }
        });
        paletaColores.add(color5);

        color6.setBackground(new java.awt.Color(51, 255, 0));
        color6.setPreferredSize(new java.awt.Dimension(20, 20));
        color6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color6MouseClicked(evt);
            }
        });
        paletaColores.add(color6);

        panelIzq.add(paletaColores);

        getContentPane().add(panelIzq, java.awt.BorderLayout.LINE_START);

        escritorio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        panelDerecho.setLayout(new java.awt.GridLayout(4, 1));

        paletaJMF.setBorder(javax.swing.BorderFactory.createTitledBorder("JMF"));
        paletaJMF.setLayout(new java.awt.GridLayout(3, 1));

        abrirJMF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/JMF/AbrirMedio.png"))); // NOI18N
        abrirJMF.setToolTipText("Abrir vídeo/sonido");
        abrirJMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirJMFActionPerformed(evt);
            }
        });
        paletaJMF.add(abrirJMF);

        camaraJMF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/JMF/Camara.png"))); // NOI18N
        camaraJMF.setToolTipText("WebCam");
        camaraJMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraJMFActionPerformed(evt);
            }
        });
        paletaJMF.add(camaraJMF);

        capturarJMF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/JMF/Capturar.png"))); // NOI18N
        capturarJMF.setToolTipText("Realizar captura");
        capturarJMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturarJMFActionPerformed(evt);
            }
        });
        paletaJMF.add(capturarJMF);

        panelDerecho.add(paletaJMF);

        paletaContraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        paletaContraste.setLayout(new java.awt.GridLayout(3, 1));

        normal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/contraste.png"))); // NOI18N
        normal.setToolTipText("Normal");
        normal.setPreferredSize(new java.awt.Dimension(50, 50));
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });
        paletaContraste.add(normal);

        iluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/iluminar.png"))); // NOI18N
        iluminado.setToolTipText("Iluminado");
        iluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminadoActionPerformed(evt);
            }
        });
        paletaContraste.add(iluminado);

        oscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/oscurecer.png"))); // NOI18N
        oscurecido.setToolTipText("Oscurecido");
        oscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecidoActionPerformed(evt);
            }
        });
        paletaContraste.add(oscurecido);

        panelDerecho.add(paletaContraste);

        paletaEscala.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        paletaEscala.setLayout(new java.awt.GridLayout(2, 1));

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/aumentar.png"))); // NOI18N
        aumentar.setToolTipText("Aumentar");
        aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarActionPerformed(evt);
            }
        });
        paletaEscala.add(aumentar);

        disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/disminuir.png"))); // NOI18N
        disminuir.setToolTipText("Reducir");
        disminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirActionPerformed(evt);
            }
        });
        paletaEscala.add(disminuir);

        panelDerecho.add(paletaEscala);

        paletaFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        paletaFiltro.setLayout(new java.awt.BorderLayout());

        selectorFiltro.setMaximumRowCount(6);
        selectorFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        selectorFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorFiltroActionPerformed(evt);
            }
        });
        paletaFiltro.add(selectorFiltro, java.awt.BorderLayout.CENTER);

        panelDerecho.add(paletaFiltro);

        getContentPane().add(panelDerecho, java.awt.BorderLayout.LINE_END);

        panelInferior.setMinimumSize(new java.awt.Dimension(350, 120));
        panelInferior.setPreferredSize(new java.awt.Dimension(350, 120));
        panelInferior.setLayout(new java.awt.BorderLayout());

        paletas.setPreferredSize(new java.awt.Dimension(397, 280));
        paletas.setLayout(new java.awt.GridLayout(1, 0));

        paletaUmbralizacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralización"));
        paletaUmbralizacion.setLayout(new javax.swing.BoxLayout(paletaUmbralizacion, javax.swing.BoxLayout.LINE_AXIS));

        sliderUmbralizacion.setMaximum(255);
        sliderUmbralizacion.setMinorTickSpacing(31);
        sliderUmbralizacion.setPaintTicks(true);
        sliderUmbralizacion.setValue(127);
        sliderUmbralizacion.setName(""); // NOI18N
        sliderUmbralizacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralizacionStateChanged(evt);
            }
        });
        sliderUmbralizacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralizacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralizacionFocusLost(evt);
            }
        });
        paletaUmbralizacion.add(sliderUmbralizacion);

        nivelesUmbralizacion.setMaximumRowCount(2);
        nivelesUmbralizacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gris", "Color" }));
        nivelesUmbralizacion.setPreferredSize(new java.awt.Dimension(60, 5));
        paletaUmbralizacion.add(nivelesUmbralizacion);

        paletas.add(paletaUmbralizacion);

        paletaBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        paletaBrillo.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setMinorTickSpacing(63);
        sliderBrillo.setPaintTicks(true);
        sliderBrillo.setValue(0);
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        paletaBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        paletas.add(paletaBrillo);

        paletaRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        paletaRotacion.setLayout(new javax.swing.BoxLayout(paletaRotacion, javax.swing.BoxLayout.LINE_AXIS));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setMinorTickSpacing(90);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setValue(0);
        sliderRotacion.setName(""); // NOI18N
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        paletaRotacion.add(sliderRotacion);

        r90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/rotacion90.png"))); // NOI18N
        r90.setToolTipText("90º");
        r90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r90ActionPerformed(evt);
            }
        });
        paletaRotacion.add(r90);

        r180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/rotacion180.png"))); // NOI18N
        r180.setToolTipText("180º");
        r180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r180ActionPerformed(evt);
            }
        });
        paletaRotacion.add(r180);

        r270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sm/iconos/imagen/rotacion270.png"))); // NOI18N
        r270.setToolTipText("270º");
        r270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r270ActionPerformed(evt);
            }
        });
        paletaRotacion.add(r270);

        paletas.add(paletaRotacion);

        panelInferior.add(paletas, java.awt.BorderLayout.CENTER);

        estado.setText("punto");
        estado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelInferior.add(estado, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        archivo.setText("Archivo");

        nuevo.setText("Nuevo");
        nuevo.setToolTipText("Crear una nueva imagen");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        archivo.add(nuevo);

        abrir.setText("Abrir");
        abrir.setToolTipText("Abrir imagen, sonido o vídeo");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        archivo.add(abrir);

        guardar.setText("Guardar");
        guardar.setToolTipText("Guardar imagen activa");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        archivo.add(guardar);

        grabarSonido.setText("Grabar sonido");
        grabarSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarSonidoActionPerformed(evt);
            }
        });
        archivo.add(grabarSonido);

        menu.add(archivo);

        imagen.setText("Imagen");

        rescaleOp.setText("RescaleOp");
        rescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescaleOpActionPerformed(evt);
            }
        });
        imagen.add(rescaleOp);

        convolveOp.setText("ConvolveOp");
        convolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveOpActionPerformed(evt);
            }
        });
        imagen.add(convolveOp);

        affineTransformOp.setText("AffineTransformOp");
        affineTransformOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affineTransformOpActionPerformed(evt);
            }
        });
        imagen.add(affineTransformOp);

        lookupOp.setText("LookupOp");
        lookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupOpActionPerformed(evt);
            }
        });
        imagen.add(lookupOp);

        bandCombineOp.setText("BandCombineOp");
        bandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandCombineOpActionPerformed(evt);
            }
        });
        imagen.add(bandCombineOp);

        colorConvertOp.setText("ColorConvertOp");
        colorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpActionPerformed(evt);
            }
        });
        imagen.add(colorConvertOp);

        umbralizacionOp.setText("UmbralizacionOp");
        umbralizacionOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umbralizacionOpActionPerformed(evt);
            }
        });
        imagen.add(umbralizacionOp);

        sobelOp.setText("SobelOp");
        sobelOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelOpActionPerformed(evt);
            }
        });
        imagen.add(sobelOp);

        restaOp.setText("RestaOp");
        restaOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaOpActionPerformed(evt);
            }
        });
        imagen.add(restaOp);

        multiplicacionOp.setText("MultiplicacionOp");
        multiplicacionOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplicacionOpActionPerformed(evt);
            }
        });
        imagen.add(multiplicacionOp);

        menu.add(imagen);

        ver.setText("Ver");

        barraEstado.setSelected(true);
        barraEstado.setText("Ver barra estado");
        barraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraEstadoActionPerformed(evt);
            }
        });
        ver.add(barraEstado);

        menu.add(ver);

        ayuda.setText("Ayuda");

        acercaDe.setText("Acerca de");
        acercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaDeActionPerformed(evt);
            }
        });
        ayuda.add(acercaDe);

        menu.add(ayuda);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void puntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(1);
            estado.setText("Punto");
        }
    }//GEN-LAST:event_puntoActionPerformed

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(2);
            estado.setText("Linea");
        }
    }//GEN-LAST:event_lineaActionPerformed

    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(3);
            estado.setText("Rectángulo");
        }
    }//GEN-LAST:event_rectanguloActionPerformed

    private void elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(4);
            estado.setText("Óvalo");
        }
    }//GEN-LAST:event_elipseActionPerformed
    
    private void barraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraEstadoActionPerformed
        if(barraEstado.getState())
            estado.setVisible(true);
        else
            estado.setVisible(false); 
    }//GEN-LAST:event_barraEstadoActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInterna){
            VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();    
                 
            JFileChooser dlg = new JFileChooser();        
            int resp = dlg.showSaveDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION){
                try{
                    File f = dlg.getSelectedFile();
                    String nombre = f.getPath();
                    if(!nombre.toLowerCase().endsWith(".jpg"))
                        f = new File(nombre + ".jpg"); 
                    vi.getLienzo().addShapesToImage();
                    ImageIO.write(vi.getLienzo().getImage(),"jpg",f);
                }catch(Exception ex){
                    System.err.println("Error al guardar la imagen");
                }
            }  
        }else
            JOptionPane.showMessageDialog(null, "La ventana activa no es de tipo imagen");
    }//GEN-LAST:event_guardarActionPerformed

    private void editarPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarPosicionActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if(editarPosicion.isSelected()){
                vi.getLienzo().setEditarPosicion(true);
                vi.getLienzo().setEditarAtributos(false);               
                editarAtributos.setSelected(false);
                
                this.repaint(); 
            }else
                vi.getLienzo().setEditarPosicion(false); 
        } 
    }//GEN-LAST:event_editarPosicionActionPerformed

    private void selectorGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectorGrosorStateChanged
        VentanaInterna vi = new VentanaInterna();
            if(vi != null) 
                vi.getLienzo().setGrosor(((Integer)selectorGrosor.getValue()));            
    }//GEN-LAST:event_selectorGrosorStateChanged

    private void rescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage imgdest = rop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rescaleOpActionPerformed

    private void convolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolveOpActionPerformed

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null && imgSrc != null){
            RescaleOp rop = new RescaleOp(1.0F,(float) sliderBrillo.getValue(), null);
            BufferedImage imgdest = rop.filter(imgSrc, null);
            if(imgdest != null){
                try{
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }           
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null)
            imgSrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgSrc = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void selectorFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorFiltroActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    Kernel k = KernelProducer.createKernel(selectorFiltro.getSelectedIndex());
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }     
    }//GEN-LAST:event_selectorFiltroActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                
                if(f.getName().toLowerCase().endsWith(".jpg")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImage(img);
                    vi.setTitle(dlg.getSelectedFile().getName());
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                }else if(f.getName().toLowerCase().endsWith(".avi") || f.getName().toLowerCase().endsWith(".mp3")){
                    VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f); 
                    vi.setTitle(f.getName());
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                }else if(f.getName().toLowerCase().endsWith(".wav")){
                    VentanaInternaReproductor vir = new VentanaInternaReproductor(f); 
                    vir.setTitle(f.getName());
                    this.escritorio.add(vir);
                    vir.setVisible(true);
                }else{
                    JOptionPane.showMessageDialog(null, "Formato de archivo desconocido");
                }           
            }catch(Exception ex){
                System.err.println("Formato de archivo desconocido");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        String ancho = JOptionPane.showInputDialog(null, "Ancho");
        String alto = JOptionPane.showInputDialog(null, "Alto:");
     
        VentanaInterna vi = new VentanaInterna();
        BufferedImage img = new BufferedImage(Integer.parseInt(ancho),Integer.parseInt(alto),BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.white);
        g2d.fillRect(0,0,Integer.parseInt(ancho),Integer.parseInt(alto));
        vi.getLienzo().setImage(img);
        vi.setTitle("nueva");
        escritorio.add(vi);
        vi.setVisible(true);
    }//GEN-LAST:event_nuevoActionPerformed

    private void iluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);                    
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = imgSrc;
                    lop.filter(imgSrc,imgdest);                   
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_iluminadoActionPerformed

    private void affineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affineTransformOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter( imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_affineTransformOpActionPerformed

    private void lookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);                    
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = imgSrc;
                    lop.filter(imgSrc,imgdest);                   
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_lookupOpActionPerformed

    private void bandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    WritableRaster rasterdest ;
                    BufferedImage imgdest ;
                    float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
                    BandCombineOp bcop = new BandCombineOp( m , null );
                    rasterdest = bcop.filter(imgSrc.getRaster(),null);
                    imgdest = new BufferedImage(imgSrc.getColorModel(),rasterdest,false,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }  
    }//GEN-LAST:event_bandCombineOpActionPerformed

    private void colorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    ICC_Profile ip;
                    ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                    ColorSpace cs = new ICC_ColorSpace(ip);
                    ColorConvertOp ccop = new ColorConvertOp(cs,null);
                    BufferedImage imgdest = ccop.filter(imgSrc,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOpActionPerformed

    private void r90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    double r = Math.toRadians(90.0);
                    Point p = new Point(imgSrc.getWidth()/2, imgSrc.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }      
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_r90ActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null && imgSrc != null) {
            double r = Math.toRadians((double)sliderRotacion.getValue());
            Point p = new Point(imgSrc.getWidth()/2, imgSrc.getHeight()/2);
            AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imgSrc, null);
            
            if(imgdest!=null){
                try{             
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            vi.getLienzo().convertToIntRGB();
        }       
               
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void r180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    double r = Math.toRadians(180.0);
                    Point p = new Point(imgSrc.getWidth()/2, imgSrc.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }      
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_r180ActionPerformed

    private void r270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    double r = Math.toRadians(270.0);
                    Point p = new Point(imgSrc.getWidth()/2, imgSrc.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_r270ActionPerformed

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);                    
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = imgSrc;
                    lop.filter(imgSrc,imgdest);                   
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_normalActionPerformed

    private void oscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecidoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();       
            if(imgSrc!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);                    
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = imgSrc;
                    lop.filter(imgSrc,imgdest);                   
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_oscurecidoActionPerformed

    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter( imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_aumentarActionPerformed

    private void disminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter( imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        vi.getLienzo().convertToIntRGB();
    }//GEN-LAST:event_disminuirActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null)
            imgSrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgSrc = null;
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void umbralizacionOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umbralizacionOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{
                    UmbralizacionOp op = new UmbralizacionOp(128);
                    BufferedImage imgdest = op.filter( imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();                    
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_umbralizacionOpActionPerformed

    private void restaOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaOpActionPerformed
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgRight = vi.getLienzo().getImage();
            VentanaInterna viNext = (VentanaInterna)escritorio.selectFrame(true);
            if(viNext != null){
                BufferedImage imgLeft = viNext.getLienzo().getImage();
                RestaOp op = new RestaOp(imgLeft);
                vi.getLienzo().setImage(op.filter(imgRight, null));
            }
        }
    }//GEN-LAST:event_restaOpActionPerformed

    private void multiplicacionOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplicacionOpActionPerformed
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgRight = vi.getLienzo().getImage();
            VentanaInterna viNext = (VentanaInterna)escritorio.selectFrame(true);
            if(viNext != null){
                BufferedImage imgLeft = viNext.getLienzo().getImage();
                MultiplicacionOp op = new MultiplicacionOp(imgLeft);
                vi.getLienzo().setImage(op.filter(imgRight, null));
            }
        }
    }//GEN-LAST:event_multiplicacionOpActionPerformed

    private void sobelOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSrc = vi.getLienzo().getImage();
            if(imgSrc!=null){
                try{     
                    SobelOp op = new SobelOp(); 
                    BufferedImage imgdest = op.filter( imgSrc, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sobelOpActionPerformed

    private void grabarSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarSonidoActionPerformed
        JFileChooser dlg = new JFileChooser();        
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION){
            try{
                File f = dlg.getSelectedFile();
                String nombre = f.getPath();
                if(!nombre.toLowerCase().endsWith(".wav"))
                    f = new File(nombre + ".wav"); 
                VentanaInternaGrabador vig = new VentanaInternaGrabador(f);
                vig.setTitle(f.getName());
                escritorio.add(vig);
                vig.setVisible(true);                
            }catch(Exception ex){
                System.err.println("Error al grabar sonido");
            }
        }   
    }//GEN-LAST:event_grabarSonidoActionPerformed

    private void abrirJMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirJMFActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f); 
                vi.setTitle(f.getName());
                this.escritorio.add(vi);
                vi.setVisible(true);
                //vi.play();
            }catch(Exception e){
                System.err.println("Error al cargar archivo");
            }
        }
    }//GEN-LAST:event_abrirJMFActionPerformed

    private void camaraJMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraJMFActionPerformed
        VentanaInternaCamara vi = VentanaInternaCamara.getInstance(); 
        if(vi != null){
            vi.setTitle("WebCam");
            this.escritorio.add(vi);
            vi.setVisible(true);
            vi.play();
        }
    }//GEN-LAST:event_camaraJMFActionPerformed

    private void capturarJMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturarJMFActionPerformed
        
        try{
            if(escritorio.getSelectedFrame() instanceof VentanaInternaCamara) {
                Player p = ((VentanaInternaCamara)escritorio.getSelectedFrame()).getPlayer();
                BufferedImage i = this.getFrame(p);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo().setImage(i);
                vi.setTitle("captura");
                this.escritorio.add(vi);
                vi.setVisible(true);
            }else if(escritorio.getSelectedFrame() instanceof VentanaInternaJMFPlayer){
                Player p = ((VentanaInternaJMFPlayer)escritorio.getSelectedFrame()).getPlayer();
                BufferedImage i = this.getFrame(p);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo().setImage(i);
                vi.setTitle("captura");
                this.escritorio.add(vi);
                vi.setVisible(true);
            }
        } catch(Exception e){
            System.err.println("Error al realizar captura: " + e);
        }
    }//GEN-LAST:event_capturarJMFActionPerformed

    private void color1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color1MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }     
    }//GEN-LAST:event_color1MouseClicked

    private void color2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color2MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }       
    }//GEN-LAST:event_color2MouseClicked

    private void color3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color3MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }     
    }//GEN-LAST:event_color3MouseClicked

    private void color4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color4MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }      
    }//GEN-LAST:event_color4MouseClicked

    private void color5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color5MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }      
    }//GEN-LAST:event_color5MouseClicked

    private void color6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color6MouseClicked
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if (evt.getButton() == MouseEvent.BUTTON1){ 
                vi.getLienzo().setColorFrente(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado1.setBackground(((JButton)(evt.getSource())).getBackground());
            }else if (evt.getButton() == MouseEvent.BUTTON3){
                vi.getLienzo().setColorFondo(((JButton)(evt.getSource())).getBackground());
                colorSeleccionado2.setBackground(((JButton)(evt.getSource())).getBackground());    
            }
        }   
    }//GEN-LAST:event_color6MouseClicked

    private void curvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(5);
            estado.setText("Curva");
        }
    }//GEN-LAST:event_curvaActionPerformed

    private void tipoTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoTrazoActionPerformed
        VentanaInterna vi = new VentanaInterna();
            if(vi != null) 
                vi.getLienzo().setTrazo(tipoTrazo.getSelectedIndex());              
    }//GEN-LAST:event_tipoTrazoActionPerformed

    private void tipoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoRellenoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null)
            vi.getLienzo().setRelleno(tipoRelleno.getSelectedIndex());
    }//GEN-LAST:event_tipoRellenoActionPerformed

    private void colorSeleccionado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSeleccionado1ActionPerformed
        JColorChooser cc = new JColorChooser();       
        Color color1 = cc.showDialog(null,"Seleccione un color de frente", Color.gray);
        VentanaInterna vi = new VentanaInterna();
        colorSeleccionado1.setBackground(color1);
        vi.getLienzo().setColorFrente(color1);
    }//GEN-LAST:event_colorSeleccionado1ActionPerformed

    private void colorSeleccionado2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSeleccionado2ActionPerformed
        JColorChooser cc = new JColorChooser();       
        Color color2 = cc.showDialog(null,"Seleccione un color de fondo", Color.gray);
        VentanaInterna vi = new VentanaInterna();
        colorSeleccionado2.setBackground(color2);
        vi.getLienzo().setColorFondo(color2);
    }//GEN-LAST:event_colorSeleccionado2ActionPerformed

    private void acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDeActionPerformed
        JOptionPane.showMessageDialog(null, "PaintSM \n Autor: Juan Antonio Moraleda Ocón \n Versión del programa: Final.");
    }//GEN-LAST:event_acercaDeActionPerformed

    private void editarAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarAtributosActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            if(editarAtributos.isSelected()){
                vi.getLienzo().setEditarAtributos(true);
                vi.getLienzo().setEditarPosicion(false);              
                editarPosicion.setSelected(false);
                
                this.repaint(); 
            }else
                vi.getLienzo().setEditarAtributos(false);             
        }  
    }//GEN-LAST:event_editarAtributosActionPerformed

    private void sliderUmbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralizacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());       
        if (vi != null) {
            if(imgSrc!=null){    
                try{                              
                    BufferedImage imgdest = null;                  
                    if(nivelesUmbralizacion.getSelectedIndex() == 0){
                        ThresholdOp op = new ThresholdOp(sliderUmbralizacion.getValue());
                        op.setType(ThresholdOp.TYPE_GREY_LEVEL);
                        //imgdest = op.filterGreyLevel(imgSrc,imgdest);
                        imgdest = op.filter(imgSrc,imgdest);
                    }else{
                        ThresholdOp op = new ThresholdOp(vi.getLienzo().getColorFrente(),sliderUmbralizacion.getValue());
                        op.setType(ThresholdOp.TYPE_COLOR);
                        //imgdest = op.filterColor(imgSrc,imgdest); 
                        imgdest = op.filter(imgSrc,imgdest);
                    }
                                        
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();                   
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderUmbralizacionStateChanged

    private void sliderUmbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null)
            imgSrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_sliderUmbralizacionFocusGained

    private void sliderUmbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizacionFocusLost
        imgSrc = null;
    }//GEN-LAST:event_sliderUmbralizacionFocusLost

    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInterna ){
            VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
            VentanaInterna vi2 = new VentanaInterna();
            
            vi2.setPreferredSize(vi.getPreferredSize());
            vi2.setTitle(vi.getTitle());    
            vi2.getLienzo().setFormas(vi.getLienzo().getFormas());
            vi2.getLienzo().setForma(vi.getLienzo().getForma());
            vi2.getLienzo().setColorFrente(vi.getLienzo().getColorFrente());
            vi2.getLienzo().setColorFondo(vi.getLienzo().getColorFondo());
            vi2.getLienzo().setRelleno(vi.getLienzo().getRelleno());
            vi2.getLienzo().setEditarPosicion(vi.getLienzo().getEditarPosicion());
            vi2.getLienzo().setEditarAtributos(vi.getLienzo().getEditarAtributos());
            vi2.getLienzo().setGrosor(vi.getLienzo().getGrosor());
            vi2.getLienzo().setTrazo(vi.getLienzo().getTrazo());
            vi2.getLienzo().setImage(vi.getLienzo().getImage());
            
            if(vi2 != null){
                this.escritorio.add(vi2);
                vi2.setVisible(true);
            }
        }
    }//GEN-LAST:event_duplicarActionPerformed

    private void rectanguloRedondeadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloRedondeadoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        if(vi != null){
            vi.getLienzo().setForma(6);
            estado.setText("Rectángulo redondeado");
        }
    }//GEN-LAST:event_rectanguloRedondeadoActionPerformed

    public BufferedImage getFrame(Player player){
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl)player.getControl(claseCtr );
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti=new BufferToImage((VideoFormat)bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        
        return (BufferedImage)img;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JButton abrirJMF;
    private javax.swing.JMenuItem acercaDe;
    private javax.swing.JMenuItem affineTransformOp;
    private javax.swing.JMenu archivo;
    private javax.swing.JButton aumentar;
    private javax.swing.JMenu ayuda;
    private javax.swing.JMenuItem bandCombineOp;
    private javax.swing.JCheckBoxMenuItem barraEstado;
    private javax.swing.JButton camaraJMF;
    private javax.swing.JButton capturarJMF;
    private javax.swing.JButton color1;
    private javax.swing.JButton color2;
    private javax.swing.JButton color3;
    private javax.swing.JButton color4;
    private javax.swing.JButton color5;
    private javax.swing.JButton color6;
    private javax.swing.JMenuItem colorConvertOp;
    private javax.swing.JButton colorSeleccionado1;
    private javax.swing.JButton colorSeleccionado2;
    private javax.swing.JMenuItem convolveOp;
    private javax.swing.JToggleButton curva;
    private javax.swing.JButton disminuir;
    private javax.swing.JButton duplicar;
    private javax.swing.JCheckBox editarAtributos;
    private javax.swing.JCheckBox editarPosicion;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel estado;
    private javax.swing.JMenuItem grabarSonido;
    private javax.swing.ButtonGroup grupoColores;
    private javax.swing.ButtonGroup grupoHerramientas;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JButton iluminado;
    private javax.swing.JMenu imagen;
    private javax.swing.JToggleButton linea;
    private javax.swing.JMenuItem lookupOp;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem multiplicacionOp;
    private javax.swing.JComboBox nivelesUmbralizacion;
    private javax.swing.JButton normal;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JButton oscurecido;
    private javax.swing.JPanel paletaBrillo;
    private javax.swing.JPanel paletaColor1;
    private javax.swing.JPanel paletaColor2;
    private javax.swing.JPanel paletaColores;
    private javax.swing.JPanel paletaContraste;
    private javax.swing.JPanel paletaEscala;
    private javax.swing.JPanel paletaFiltro;
    private javax.swing.JPanel paletaFormas;
    private javax.swing.JPanel paletaGrosor;
    private javax.swing.JPanel paletaJMF;
    private javax.swing.JPanel paletaRotacion;
    private javax.swing.JPanel paletaUmbralizacion;
    private javax.swing.JPanel paletas;
    private javax.swing.JPanel panelDerecho;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelIzq;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JToggleButton punto;
    private javax.swing.JButton r180;
    private javax.swing.JButton r270;
    private javax.swing.JButton r90;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JToggleButton rectanguloRedondeado;
    private javax.swing.JMenuItem rescaleOp;
    private javax.swing.JMenuItem restaOp;
    private javax.swing.JComboBox selectorFiltro;
    private javax.swing.JSpinner selectorGrosor;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderUmbralizacion;
    private javax.swing.JMenuItem sobelOp;
    private javax.swing.JComboBox tipoRelleno;
    private javax.swing.JComboBox tipoTrazo;
    private javax.swing.JMenuItem umbralizacionOp;
    private javax.swing.JMenu ver;
    // End of variables declaration//GEN-END:variables
}
